// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// END NEXT AUTH

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  channelBans       ChannelBan[]
  channelMessages   ChannelMessage[]
  stream            Stream?
  channel           Channel?
  followedChannels  ChannelFollow[]
  moderatedChannels ChannelModerator[]
  emotes            Emote[]
}

model Channel {
  id         String             @id @default(cuid())
  userId     String             @unique
  user       User               @relation(fields: [userId], references: [id])
  bans       ChannelBan[]
  messages   ChannelMessage[]
  emotes     ChannelEmote[]
  follows    ChannelFollow[]
  moderators ChannelModerator[]
}

model Stream {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model ChannelMessage {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
}

model ChannelBan {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Emote {
  id             String         @id @default(cuid())
  creatorId      String
  creator        User           @relation(fields: [creatorId], references: [id])
  public         Boolean        @default(false)
  name           String
  image          String
  channelsUsedOn ChannelEmote[]
}

model ChannelEmote {
  id        String  @id @default(cuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
  emoteId   String
  emote     Emote   @relation(fields: [emoteId], references: [id])
}

model ChannelFollow {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
}

model ChannelModerator {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
}